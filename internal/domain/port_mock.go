// Code generated by MockGen. DO NOT EDIT.
// Source: port.go

// Package domain is a generated GoMock package.
package domain

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPortService is a mock of PortService interface.
type MockPortService struct {
	ctrl     *gomock.Controller
	recorder *MockPortServiceMockRecorder
}

// MockPortServiceMockRecorder is the mock recorder for MockPortService.
type MockPortServiceMockRecorder struct {
	mock *MockPortService
}

// NewMockPortService creates a new mock instance.
func NewMockPortService(ctrl *gomock.Controller) *MockPortService {
	mock := &MockPortService{ctrl: ctrl}
	mock.recorder = &MockPortServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPortService) EXPECT() *MockPortServiceMockRecorder {
	return m.recorder
}

// UpsertPort mocks base method.
func (m *MockPortService) UpsertPort(port *Port) (*Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPort", port)
	ret0, _ := ret[0].(*Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertPort indicates an expected call of UpsertPort.
func (mr *MockPortServiceMockRecorder) UpsertPort(port interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPort", reflect.TypeOf((*MockPortService)(nil).UpsertPort), port)
}
